head(Slides.norm$genes)
Res <- matchValues(A, B)
unique(Res$x.name, Res$y.name) 
paste(Res$x.name, Res$y.name)
lapply(Res[, c("x.name", "y.name")], function(z){return(unique(z))})
apply(Res[, c("x.name", "y.name")], MARGIN=1, function(z){return(unique(z))})
sapply(Res[, c("x.name", "y.name")], MARGIN=1, function(z){return(unique(z))})
Res <- matchValues(A, B)
Res
library(RUnit)
expecty
Res
unique(Res)
nrow(Res)
Res
Res$x
Res$y
Res$y
Res
Res
A
B
Res
Res
chooseAll==chooseAll
as.symbol(chooseAll)
symbol(chooseAll)
name(chooseAll)
function(chooseAll)
name(chooseAll)
as.name(chooseAll)
quote(chooseAll)
deparse(chooseAll)
substitute(chooseAll)
deparse(substitute(chooseAll))
chooseFunX <- chooseFun
chooseFun
chooseFunX <- chooseAll
deparse(substitute(chooseFunX))
deparse(substitute(get(chooseFunX)))
get(chooseFunX)
get("chooseFunX")
substitute(get("chooseFunX"))
deparse(get("chooseFunX"))
bquote(chooseFunX)
REs
Res
chooseAll(1:3)
chooseOrderedVal(1:4)
chooseOrderedValues(1:4)
chooseOrderedValue(1;4)
chooseOrderedValue(1:4)
5:1
q()
